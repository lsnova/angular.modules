import { OnChanges, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor, FormControl } from '@angular/forms';
import { ErrorStateMatcher } from '@angular/material';
export declare const CUSTOM_SELECT_CONTROL_VALUE_ACCESSOR: any;
export declare class MatSelectComponent implements ControlValueAccessor, OnInit, OnChanges, OnDestroy {
    control: FormControl;
    options: any[];
    placeholder: string;
    bindLabel: string;
    bindBy: string;
    bindValue: string;
    clear: boolean;
    clearLabel: string;
    disabled: boolean;
    multiple: boolean;
    errorStateMatcher: ErrorStateMatcher;
    errors: any[];
    errorLabel: string;
    optionTemplate: any;
    matSelect: any;
    searchInput: any;
    private destroy$;
    private panelClosed$;
    private optionChanges$;
    private selectedOptions;
    filteredOptions: any[];
    searchTerm: string;
    private _onTouched;
    private _onChange;
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    onBlur(): void;
    writeValue(value: any): void;
    setSingleValue(value: any): void;
    setMultipleValue(values: any[]): void;
    findOption(value: any): any;
    changeValue(value: any): void;
    parseValue(value: any): any;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    bindOptionSelectionChanges(): void;
    handleOptionSelection(event: any): any;
    resetOptions(): void;
    clearValue($event: any): void;
    filterOptions(value: any): void;
    readonly isSearchEnabled: boolean;
    readonly isClearEnabled: number | boolean;
    handleKeydown(event: KeyboardEvent): void;
    handleDisabled(): void;
    scrollToActiveItem(): void;
    openedChange(isOpen: any): void;
    readonly errorList: any[];
}
